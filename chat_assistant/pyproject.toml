[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "chat-assistant"
version = "1.0.0"
description = "Chat Assistant for medical exam preparation"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [
    { include = "app", from = "src" }
]
package-mode = true

[tool.poetry.dependencies]
python = "^3.11"

# Core web framework
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
gunicorn = "^21.2.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

# Database
redis = "^5.0.0"
chromadb = "^0.4.0"

# Use CPU-only PyTorch to avoid triton/CUDA dependency issues in Docker
torch = {version = "^2.1.0", source = "pytorch"}
transformers = "^4.36.0"
sentence-transformers = "^2.2.2"
huggingface-hub = "^0.23.0" 

# Utils
httpx = "^0.25.0"
requests = "^2.31.0"
pandas = "^2.1.0"
numpy = "^1.24.0"
scikit-learn = "^1.3.0"
python-dotenv = "^1.0.0"
prometheus-client = "^0.22.1"
psutil = "^7.0.0"
datasets = "^2.14.0"
langchain-community = "^0.2.0" 
langchain-huggingface = "^0.0.3"  

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.11.0"
isort = "^5.12.0"
mypy = "^1.7.0"
ruff = "^0.1.0"

# Add PyTorch CPU-only source to avoid CUDA/triton dependencies
[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "redis.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 100
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow-running tests",
]